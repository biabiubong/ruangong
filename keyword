#include<bits/stdc++.h>
using namespace std;
#include <ctype.h>
#include <string.h>
int m=0;
int casenum=0;
int ifelsenum=0;
int elseifnum=0;
int level=0;
stack<int>st; 
#define MAXWORD 100001  //关键字最大的个数
char ww[100001]; 
int casecount[100001]={0};
struct key   //结构体数组,关键字按顺序排列
{
	char *word;
	int count;
} keytab[] = {
	"auto",0,
	"break",0,
	"case",0,
	"char",0,
	"const",0,
	"continue",0,
	"default",0,//6
	"do",0,
	"double",0,
	"else",0,//9
	"enum",0,
	"extern",0,
	"float",0,
	"for",0,
	"goto",0,
	"if",0,//15
	"int",0,
	"long",0,
	"register",0,
	"return",0,
	"short",0,
	"signed",0,
	"sizeof",0,
	"static",0,
	"struct",0,
	"switch",0,
	"typedef",0,
	"union",0,
	"unsigned",0,
	"void",0,
	"volatile",0,
	"while",0,
};
//关键字的个数等于数组的长度除以单个元素的长度
#define NKEYS (sizeof keytab / sizeof(struct key))

int getword(char *, int); //从输入中读取下一个字符或单词
int binsearch(char *, struct key *, int); //在tab[0]到tab[n-1]中查找单词
void readTxt(string file); //读取txt文件内容
void judge();

/* binsearch:  find word in tab[0]...tab[n-1] */
//折半查找
int binsearch(char *word, struct key tab[], int n0)
{
    int cond;
    int low, high, mid;
    low = 0;
    high = n0 - 1;
    while (low <= high)
   {
        mid = (low+high) / 2;
        if ((cond = strcmp(word, tab[mid].word)) < 0)
            high = mid - 1;
        else if (cond > 0)
            low = mid + 1;
        else
            return mid;
    }
    return -1;
}

/*getword从输入中读取下一个单词是以字母开头的字母和数字串，
也可以是以字母开头的字母和数字串，也可以是一个非空白字符串。
函数返回值可能是单词的第一个字符、文件结束符EOF或字符本身（如果该字符不是字母字符本身）*/
int i=0;
int getword(char *word, int lim)
{
    char *w = word;
    for(i;i<m;i++)
    {
    	if(isspace(ww[i])==0)
    	break;
	}//c跳过空白符
    *w++ = ww[i];
    if (!isalpha(ww[i]) )//ww[i]不是字母
    {
        *w = '\0';
        return ww[i++];
    }
    i++;
    for ( ; --lim > 0; w++)
    { 
        if (!isalnum(*w =ww[i++])) //输入不是字母或数字时，该单词结束
  		{
            i--;
            break;
        }
    }
	*w = '\0'; //字符串结束符'\0'
	 //返回值是单词的第一个字符
}

//读取txt文件 
void readTxt(string file)
{
    ifstream infile; 
    infile.open(file.data());   //将文件流对象与文件连接起来 
    assert(infile.is_open());   //若失败,则输出错误消息,并终止程序运行 

    char c;
    infile >> noskipws;
    while (!infile.eof())
    {
        infile>>c;
		ww[m++]=c;

    }
    infile.close();             //关闭文件输入流 
}

//else判断 
void judge()
{
	while(st.empty()==0)
	{
		if(st.top()==1)
		{
			ifelsenum++;
			st.pop();
			break;
		}
		if(st.top()==2)
		{
			while(st.top()!=1)//保证栈内的else if全部删除 
			{
				st.pop();
			}
			st.pop();//删除if 
			elseifnum++;
			break; 
		}
	}
}

//主函数 
int main()
{
		int u;
		int flag=0;//记录是否有非字母符号 
	    string str;
	    cin>>str;
	    cin>>level;
	    readTxt(str) ;
	    char word[MAXWORD];
		char preword[MAXWORD];//记录上一个单词 
	    for(int i=0;i<m;i++)
	   {
		    getword(word, MAXWORD);
		    if (isalpha(word[0])) 
		    {
				if ((u= binsearch(word, keytab, NKEYS)) >= 0)
		        {
					keytab[u].count++;//在结构体中查找成功，关键字计数加1
					if(u==6)//出现default，记录case的值 
					{
						casecount[casenum]=keytab[2].count;
						casenum++;
					}
					if(u==15&&(strcmp(preword,"else")!=0||flag==1))//当前是if并且前一个不是else或者前一个是非字母 
			    		st.push(1);   //if 
					if(u==15&&strcmp(preword,"else")==0&&flag==0)//当前是if并且前一个是else但中间没有被删去的非字母符号 
			    		st.push(2);  //else if 
					if((strcmp(keytab[u].word,"if")!=0||flag==1)&&strcmp(preword,"else")==0)////对else的下一个字母进行判断：前一个是else并且当前不是if或者当前是非字母 
			   			judge();        //else判断 
					strcpy(preword,keytab[u].word);
				}
				flag=0;	//还原 flag
			}
			else flag=1;//上一个为非字母 
		} 
	 //打印结果
	    int count0=0;
	    for (int i=0;i<NKEYS;i++)
		{
			count0+=keytab[i].count;
	 	}
	    cout<<"total num: "<<count0<<endl;
	    if(level>=2)
	    {
	    	cout<<"switch num: "<<casenum<<endl;
	    	cout<<"case num: "<<casecount[0];
	    	for(int i=1;i<casenum;i++)
	    	{
	    		cout<<" "<<casecount[i]-casecount[i-1];
			}
			cout<<endl;
			if(level>=3)
			{
				cout<<"if-else num: "<<ifelsenum<<endl;
				if(level==4)
				{
					cout<<"if-elseif-else num: "<<elseifnum<<endl;
				}
			}
		}
	return 0;
}
